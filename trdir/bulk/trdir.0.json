{"index": {"_type": "trdir", "_index": "trdir"}}
{"src": "", "name": "__init__.py"}
{"index": {"_type": "trdir", "_index": "trdir"}}
{"src": "#!/usr/bin/python\n#encoding=utf8\n\nimport datetime\nimport sys\n\n#sys.path.append('./')\nfrom utils import ElasticFilesGenerator\n\nefg = ElasticFilesGenerator(\"trdir\",\"trdir\",'../bulk/trdir', preserve_path=True)\n\nclass NoDataRecordException(Exception):\n    pass\n\nclass FixedWidthLineToShortException(Exception):\n    pass\n\ndef read(filename):\n\n    lineNum = 0\n\n    with open(filename, 'r') as f:\n        try:\n            trdir = {\n                'name': filename,\n                'src': f.read(),\n                }\n            efg.add(trdir)\n\n        except Exception:\n            print('ERRO ao tentar processar o arquivo %s' % filename)\n\nfor f in sys.argv[1:]:\n    read(f)\n", "name": "read.py"}
{"index": {"_type": "trdir", "_index": "trdir"}}
{"src": "#!/bin/bash\ncurl -XDELETE 10.151.1.21:9200/trdir/?pretty\ncurl -XPUT 10.151.1.21:9200/trdir/?pretty\ncurl -XPUT 10.151.1.21:9200/trdir/_mapping/trdir?pretty --data-binary @trdir/mapping.json\n\n", "name": "refresh.sh"}
{"index": {"_type": "trdir", "_index": "trdir"}}
{"src": "#!/bin/bash\n\nROOTDIR=\"$(cd \"$(dirname \"$0\")\" && pwd)\"\nSRCDIR=\"$ROOTDIR/src\"\nBULKDIR=\"$ROOTDIR/bulk\"\n\nrm \"$BULKDIR/\"*\ncd \"$SRCDIR\"\n\"$ROOTDIR/read.py\" *\ncd \"$ROOTDIR\"\n./upload.sh \"$BULKDIR/\"*\n", "name": "trdir.sh"}
{"index": {"_type": "trdir", "_index": "trdir"}}
{"src": "#/bin/bash\n\nfor i in \"$@\"\ndo\n  /usr/bin/curl -XPUT 10.151.1.21:9200/_bulk --data-binary \"@$i\" > /dev/null\ndone\n", "name": "upload.sh"}
{"index": {"_type": "trdir", "_index": "trdir"}}
{"src": "#!/usr/bin/python\n#encoding=utf8\n\n\nimport json\nimport ntpath\n\nclass ElasticFilesGenerator:\n\n    def __init__(self, iv_index, iv_type, iv_file_name_prefix, preserve_path=False):\n\n        self.command_line = {\n            \"index\": {\n                \"_index\": iv_index,\n                \"_type\": iv_type,\n            }}\n\n        self.command_line_delete = {\n            \"delete\": {\n                \"_index\": iv_index,\n                \"_type\": iv_type,\n            }}\n\n \n        self.CANT_REGS_FILE=50000\n        self.nreg=0\n        self.fsalida=None\n\n        if preserve_path:\n            self.file_name_prefix = iv_file_name_prefix\n        else:\n            head, tail = ntpath.split(iv_file_name_prefix)\n            self.file_name_prefix = tail\n\n    def __del__(self):\n        if self.fsalida is not None:\n            self.fsalida.close()\n\n    def do_file_control(self):\n\n        if (self.nreg % self.CANT_REGS_FILE) == 0:\n            nfile = int(self.nreg / self.CANT_REGS_FILE)\n            if self.fsalida is not None:\n                self.fsalida.close()\n            self.fsalida = open(\"%s.%s.json\" % (self.file_name_prefix, str(nfile)),\"w\")\n\n        self.nreg = self.nreg + 1\n   \n    def add(self, iv_object, iv_id=None):\n\n        self.do_file_control()\n\n        if iv_id is not None:\n            self.command_line['index'].update({ '_id': iv_id })\n\n        json.dump(self.command_line, self.fsalida)\n        self.fsalida.write('\\n')\n        json.dump(iv_object, self.fsalida)\n        self.fsalida.write('\\n')\n\n\n    def index(self, iv_object, iv_id=None):\n        self.add(iv_object, iv_id)\n\n    def delete(self, iv_id):\n        self.do_file_control()\n        self.command_line_delete['delete'].update({ '_id': iv_id })\n        json.dump(self.command_line_delete, self.fsalida)\n        self.fsalida.write('\\n')\n", "name": "utils.py"}
